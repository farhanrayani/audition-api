plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.3'
    id 'io.spring.dependency-management' version '1.1.0'
    id "maven-publish"
    id 'jacoco'
    id "com.github.spotbugs" version "5.0.14"
    id "io.freefair.lombok" version "8.0.1"
    id "checkstyle"
    id "pmd"
}

group = 'com.audition'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
targetCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2022.0.1")
    set('logbackVersion', "1.4.5")
    set('slf4jVersion', "2.0.5")
    set('springdocVersion', "2.0.2")
    set('openTelemetryVersion', "1.26.0")
    set('openTelemetryInstrumentationVersion', "1.26.0")
}

dependencies {
    // CRITICAL: Core Spring Boot dependencies - MUST BE FIRST
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    // Configuration and externalized config support
    implementation 'org.springframework.cloud:spring-cloud-starter-config'

    // Monitoring and observability
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation 'io.micrometer:micrometer-tracing'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:context-propagation'

    // OpenTelemetry dependencies
    implementation "io.opentelemetry:opentelemetry-api:${openTelemetryVersion}"
    implementation "io.opentelemetry:opentelemetry-sdk:${openTelemetryVersion}"
    implementation "io.opentelemetry:opentelemetry-extension-annotations:${openTelemetryVersion}"
    implementation "io.opentelemetry:opentelemetry-semconv:${openTelemetryVersion}"
    implementation "io.opentelemetry:opentelemetry-context:${openTelemetryVersion}"
    implementation "io.opentelemetry:opentelemetry-exporter-otlp:${openTelemetryVersion}"
    implementation "io.opentelemetry:opentelemetry-exporter-prometheus:${openTelemetryVersion}"
    implementation "io.opentelemetry:opentelemetry-exporter-jaeger:${openTelemetryVersion}"

    // OpenTelemetry Spring Boot integration
    implementation "io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter:${openTelemetryInstrumentationVersion}"
    implementation "io.opentelemetry.instrumentation:opentelemetry-spring-web-3.1:${openTelemetryInstrumentationVersion}"
    implementation "io.opentelemetry.instrumentation:opentelemetry-spring-webmvc-6.0:${openTelemetryInstrumentationVersion}"
    implementation "io.opentelemetry.instrumentation:opentelemetry-logback-appender-1.0:${openTelemetryInstrumentationVersion}"

    // Resilience and fault tolerance
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.0.2'

    // API documentation
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

    // Logging dependencies
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "ch.qos.logback:logback-core:${logbackVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation 'net.logstash.logback:logstash-logback-encoder:7.2'

    // Apache Commons for utility functions
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // Caching support
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.5'

    // Development tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Runtime dependencies
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.0'
    testImplementation "io.opentelemetry:opentelemetry-sdk-testing:${openTelemetryVersion}"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "io.opentelemetry:opentelemetry-bom:${openTelemetryVersion}"
        mavenBom "io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:${openTelemetryInstrumentationVersion}"
    }
}

// Checkstyle configuration
checkstyle {
    toolVersion = '10.3.4'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    configProperties = [
            'checkstyle.cache.file': "${buildDir}/checkstyle.cache",
    ]
}

checkstyleMain {
    reports {
        xml.required = true
        html.required = true
    }
}

checkstyleTest {
    reports {
        xml.required = true
        html.required = true
    }
}

// PMD configuration
pmd {
    toolVersion = '6.55.0'
    ruleSetFiles = files("${rootDir}/config/pmd/ruleset.xml")
    ruleSets = []
    ignoreFailures = false
}

pmdMain {
    reports {
        xml.required = true
        html.required = true
    }
}

pmdTest {
    reports {
        xml.required = true
        html.required = true
    }
}

// SpotBugs configuration
spotbugs {
    ignoreFailures = false
    effort = 'max'
    reportLevel = 'medium'
    excludeFilter = file("${rootDir}/config/spotbugs/spotbugs-exclude.xml")
}

spotbugsMain {
    reports {
        xml.required = true
        html.required = true
    }
}

spotbugsTest {
    reports {
        xml.required = true
        html.required = true
    }
}

// JaCoCo configuration
jacoco {
    toolVersion = '0.8.8'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/AuditionApplication.class',
                    '**/configuration/**',
                    '**/model/**'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
}

// Code quality check task
task codeQualityCheck {
    dependsOn 'checkstyleMain', 'checkstyleTest', 'pmdMain', 'pmdTest', 'spotbugsMain', 'spotbugsTest', 'jacocoTestCoverageVerification'
    description = 'Runs all code quality checks'
    group = 'verification'
}

// Make build depend on code quality checks
check.dependsOn codeQualityCheck

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

// Custom task for running the application in different profiles
task runDev(type: JavaExec) {
    group = 'application'
    description = 'Run the application with development profile'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.audition.AuditionApplication'
    args = ['--spring.profiles.active=dev']
}

task runProd(type: JavaExec) {
    group = 'application'
    description = 'Run the application with production profile'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.audition.AuditionApplication'
    args = ['--spring.profiles.active=prod']
}