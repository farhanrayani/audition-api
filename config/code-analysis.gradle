// Code Analysis Configuration
// This file contains common code analysis configurations for the project

// Common code quality configurations
ext.codeQualityConfig = [
        checkstyleVersion: '10.3.4',
        pmdVersion: '6.55.0',
        spotbugsVersion: '4.7.3',
        jacocoVersion: '0.8.8'
]

// Apply code quality plugins if not already applied
if (!project.plugins.hasPlugin('checkstyle')) {
    apply plugin: 'checkstyle'
}

if (!project.plugins.hasPlugin('pmd')) {
    apply plugin: 'pmd'
}

if (!project.plugins.hasPlugin('com.github.spotbugs')) {
    apply plugin: 'com.github.spotbugs'
}

if (!project.plugins.hasPlugin('jacoco')) {
    apply plugin: 'jacoco'
}

// Checkstyle configuration
checkstyle {
    toolVersion = codeQualityConfig.checkstyleVersion
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    maxWarnings = 0
    maxErrors = 0
}

// PMD configuration
pmd {
    toolVersion = codeQualityConfig.pmdVersion
    consoleOutput = true
    ignoreFailures = false
    ruleSetFiles = files("${rootDir}/config/pmd/pmd-rules.xml")
    ruleSets = []
}

// SpotBugs configuration
spotbugs {
    toolVersion = codeQualityConfig.spotbugsVersion
    effort = 'max'
    reportLevel = 'medium'
    ignoreFailures = false
    excludeFilter = file("${rootDir}/config/spotbugs/spotbugs-exclude.xml")
}

// JaCoCo configuration
jacoco {
    toolVersion = codeQualityConfig.jacocoVersion
}

// Task to run all code analysis tools
task runCodeAnalysis {
    group = 'verification'
    description = 'Runs all code analysis tools: checkstyle, pmd, spotbugs, and jacoco'
    dependsOn 'checkstyleMain', 'checkstyleTest', 'pmdMain', 'pmdTest', 'spotbugsMain', 'spotbugsTest', 'jacocoTestReport'
}

// Configure reports
tasks.withType(Checkstyle) {
    reports {
        xml.required = true
        html.required = true
        html.stylesheet = resources.text.fromFile("${rootDir}/config/checkstyle/checkstyle-simple.xsl")
    }
}

tasks.withType(Pmd) {
    reports {
        xml.required = true
        html.required = true
    }
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        xml.required = true
        html.required = true
    }
}

// Configure JaCoCo test report
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.75
            }
        }
    }
}

// Exclude generated classes and configuration from coverage
afterEvaluate {
    jacocoTestReport {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/AuditionApplication.class',
                    '**/configuration/**',
                    '**/model/**',
                    '**/*Config.class',
                    '**/*Configuration.class'
            ])
        }))
    }
}